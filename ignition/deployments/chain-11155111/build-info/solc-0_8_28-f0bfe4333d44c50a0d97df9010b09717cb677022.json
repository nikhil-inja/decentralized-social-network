{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f0bfe4333d44c50a0d97df9010b09717cb677022",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/UserProfile.sol": "project/contracts/UserProfile.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/UserProfile.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title UserProfile (Refactored)\r\n * @dev Manages user profiles for the decentralized social network.\r\n * This version includes soft-deletion functionality for user control.\r\n */\r\ncontract UserProfile {\r\n    struct Profile {\r\n        string username;\r\n        string bio;\r\n        string profileImageHash; // IPFS hash of the profile image\r\n        bool isActive;           // NEW: Flag for soft-deleting profiles.\r\n    }\r\n\r\n    mapping(address => Profile) public profiles;\r\n\r\n    event ProfileUpdated(address indexed user, string username, string bio, string profileImageHash);\r\n    event ProfileDeleted(address indexed user); // NEW: Event for soft deletion.\r\n\r\n\r\n    /**\r\n     * @dev Creates or updates a user's profile, ensuring it is marked as active.\r\n     */\r\n    function setProfile(string memory _username, string memory _bio, string memory _profileImageHash) public {\r\n        // UPDATED: Now includes the 'isActive' flag, set to true.\r\n        profiles[msg.sender] = Profile(_username, _bio, _profileImageHash, true);\r\n        emit ProfileUpdated(msg.sender, _username, _bio, _profileImageHash);\r\n    }\r\n\r\n    /**\r\n     * @dev NEW: Allows a user to soft-delete their profile.\r\n     */\r\n    function deleteProfile() public {\r\n        // This sets the user's active status to false but preserves their data history.\r\n        profiles[msg.sender].isActive = false;\r\n        emit ProfileDeleted(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev A view function to retrieve a user's profile data.\r\n     */\r\n    function getProfile(address _user) public view returns (Profile memory) {\r\n        return profiles[_user];\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}
{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-fe4e377070b239ed1d6fe4e5e8acbaaed355ed31",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Post.sol": "project/contracts/Post.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/Post.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n// Import the standard ERC20 interface to allow this contract to interact with our token.\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title Post (Refactored)\r\n * @dev This version combines the best features of both designs: the modular, gas-efficient\r\n * architecture of our plan with the enhanced features (updating, user post mapping)\r\n * from your partner's contribution. It manages the creation, updating, and tipping of posts.\r\n */\r\ncontract Post {\r\n    // --- State Variables ---\r\n\r\n    IERC20 public socialToken; // The interface to interact with our SocialToken contract.\r\n\r\n    struct PostData {\r\n        uint256 postId;\r\n        address author;\r\n        string contentHash;     // CRITICAL: We store a hash of the content, not the content itself.\r\n        uint256 createdAt;      // Renamed from 'timestamp' for clarity.\r\n        uint256 updatedAt;      // NEW: A great feature from your partner's contract.\r\n        uint256 tipJar;         // Total SocialToken this post has received.\r\n        bool isActive;\r\n    }\r\n\r\n    // The primary storage for all posts.\r\n    PostData[] public posts;\r\n\r\n    // NEW: An efficient mapping to look up all posts by a user. A great feature.\r\n    mapping(address => uint256[]) public userPosts;\r\n\r\n    // --- Events ---\r\n\r\n    event PostCreated(uint256 indexed postId, address indexed author, string contentHash);\r\n    event PostUpdated(uint256 indexed postId, string newContentHash); // NEW\r\n    event PostDeleted(uint256 indexed postId);\r\n    event PostTipped(uint256 indexed postId, address indexed tipper, uint256 amount);\r\n\r\n\r\n    // --- Modifiers ---\r\n    // Using modifiers makes our functions cleaner and safer, a great pattern from your partner's code.\r\n\r\n    modifier postExists(uint256 _postId) {\r\n        require(_postId < posts.length, \"Post does not exist.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthor(uint256 _postId) {\r\n        require(posts[_postId].author == msg.sender, \"You are not the author of this post.\");\r\n        _;\r\n    }\r\n\r\n    modifier isActive(uint256 _postId) {\r\n        require(posts[_postId].isActive, \"Post is not active.\");\r\n        _;\r\n    }\r\n\r\n    // --- Functions ---\r\n\r\n    /**\r\n     * @dev The constructor sets the address of the deployed SocialToken contract.\r\n     */\r\n    constructor(address _tokenAddress) {\r\n        socialToken = IERC20(_tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new post.\r\n     * @param _contentHash The IPFS hash of the post content.\r\n     */\r\n    function createPost(string memory _contentHash) public {\r\n        uint256 postId = posts.length;\r\n        posts.push(PostData({\r\n            postId: postId,\r\n            author: msg.sender,\r\n            contentHash: _contentHash,\r\n            createdAt: block.timestamp,\r\n            updatedAt: block.timestamp,\r\n            tipJar: 0,\r\n            isActive: true\r\n        }));\r\n\r\n        // Add the new postId to the list of posts for that user.\r\n        userPosts[msg.sender].push(postId);\r\n\r\n        emit PostCreated(postId, msg.sender, _contentHash);\r\n    }\r\n\r\n    /**\r\n     * @dev NEW: Allows the original author to update their post.\r\n     * @param _postId The ID of the post to update.\r\n     * @param _newContentHash The new IPFS hash for the updated content.\r\n     */\r\n    function updatePost(uint256 _postId, string memory _newContentHash) public postExists(_postId) onlyAuthor(_postId) isActive(_postId) {\r\n        PostData storage post = posts[_postId];\r\n        post.contentHash = _newContentHash;\r\n        post.updatedAt = block.timestamp;\r\n        emit PostUpdated(_postId, _newContentHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a user to tip a post with SocialToken.\r\n     * The user must have first called `approve()` on the SocialToken contract.\r\n     */\r\n    function tipPost(uint256 _postId, uint256 _amount) public postExists(_postId) isActive(_postId) {\r\n        require(_amount > 0, \"Tip amount must be greater than zero.\");\r\n\r\n        PostData storage post = posts[_postId];\r\n\r\n        // This contract calls the token contract to transfer the approved amount.\r\n        bool success = socialToken.transferFrom(msg.sender, post.author, _amount);\r\n        require(success, \"Token transfer failed. Check your approval.\");\r\n\r\n        post.tipJar += _amount;\r\n        emit PostTipped(_postId, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the original author to soft-delete their post.\r\n     */\r\n    function deletePost(uint256 _postId) public postExists(_postId) onlyAuthor(_postId) {\r\n        posts[_postId].isActive = false;\r\n        posts[_postId].updatedAt = block.timestamp;\r\n        emit PostDeleted(_postId);\r\n    }\r\n\r\n\r\n    // --- View Functions ---\r\n\r\n    /**\r\n     * @dev Gets the total number of posts, useful for frontend logic.\r\n     */\r\n    function postCount() public view returns (uint256) {\r\n        return posts.length;\r\n    }\r\n\r\n    /**\r\n     * @dev NEW: Gets all post IDs for a specific user.\r\n     */\r\n    function getPostsByUser(address _user) public view returns (uint256[] memory) {\r\n        return userPosts[_user];\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}
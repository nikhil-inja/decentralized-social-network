{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f7dd2e988541bd52334af887c9aeb2ec89c27a0a",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/EscrowFactory.sol": "project/contracts/EscrowFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/ArbiterRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title ArbiterRegistry\r\n * @dev Manages a list of approved arbiters for the escrow platform.\r\n * Only the platform owner can add or remove arbiters, but the list is public.\r\n */\r\ncontract ArbiterRegistry is Ownable {\r\n    struct Arbiter {\r\n        string name;\r\n        string profileHash; // IPFS hash of detailed credentials\r\n        bool isActive;\r\n    }\r\n\r\n    mapping(address => Arbiter) public arbiters;\r\n    address[] public arbiterList;\r\n\r\n    event ArbiterAdded(address indexed arbiterAddress, string name);\r\n    event ArbiterRemoved(address indexed arbiterAddress);\r\n\r\n    // The deployer of the contract is set as the owner\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    /**\r\n     * @dev Adds a new arbiter to the registry. Only callable by the platform owner.\r\n     */\r\n    function addArbiter(address _arbiterAddress, string memory _name, string memory _profileHash) external onlyOwner {\r\n        require(!arbiters[_arbiterAddress].isActive, \"Arbiter already exists.\");\r\n        \r\n        arbiters[_arbiterAddress] = Arbiter({\r\n            name: _name,\r\n            profileHash: _profileHash,\r\n            isActive: true\r\n        });\r\n        \r\n        arbiterList.push(_arbiterAddress);\r\n        emit ArbiterAdded(_arbiterAddress, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Deactivates an arbiter, preventing them from being chosen for new contracts.\r\n     */\r\n    function removeArbiter(address _arbiterAddress) external onlyOwner {\r\n        require(arbiters[_arbiterAddress].isActive, \"Arbiter does not exist or is already inactive.\");\r\n        arbiters[_arbiterAddress].isActive = false;\r\n        // Note: We don't remove from the array to preserve history. Frontend will filter.\r\n        emit ArbiterRemoved(_arbiterAddress);\r\n    }\r\n\r\n    function isArbiterActive(address _arbiterAddress) external view returns (bool) {\r\n        return arbiters[_arbiterAddress].isActive;\r\n    }\r\n\r\n    function getArbiterList() external view returns (address[] memory) {\r\n        return arbiterList;\r\n    }\r\n}\r\n\r\n"
      },
      "project/contracts/Escrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title Escrow (Core Implementation)\r\n * @dev This contract manages a single, milestone-based freelance agreement\r\n * using a pre-agreed arbiter for dispute resolution.\r\n */\r\ncontract Escrow is ReentrancyGuard {\r\n    // --- State Variables ---\r\n\r\n    IERC20 public immutable token;\r\n    address public immutable client;\r\n    address public immutable freelancer;\r\n    address public immutable arbiter;\r\n\r\n    enum AgreementStatus { CREATED, FUNDED, IN_PROGRESS, DISPUTED, COMPLETED, CANCELED }\r\n    AgreementStatus public currentStatus;\r\n\r\n    enum MilestoneStatus { PENDING, SUBMITTED, APPROVED }\r\n    struct Milestone {\r\n        uint256 payoutAmount;\r\n        string detailsHash;\r\n        string workHash;\r\n        MilestoneStatus state;\r\n    }\r\n\r\n    Milestone[] public milestones;\r\n    uint256 public totalAmount;\r\n\r\n    // --- Events ---\r\n\r\n    event AgreementFunded(uint256 amount);\r\n    event WorkSubmitted(uint256 indexed milestoneId, string workHash);\r\n    event MilestoneApproved(uint256 indexed milestoneId, uint256 amount);\r\n    event DisputeRaised(uint256 indexed milestoneId, address indexed raisedBy);\r\n    event DisputeResolved(uint256 indexed milestoneId, address indexed winner, uint256 amount);\r\n\r\n    // --- Modifiers ---\r\n\r\n    modifier onlyClient() { require(msg.sender == client, \"ESCROW: Caller is not the client\"); _; }\r\n    modifier onlyFreelancer() { require(msg.sender == freelancer, \"ESCROW: Caller is not the freelancer\"); _; }\r\n    modifier onlyArbiter() { require(msg.sender == arbiter, \"ESCROW: Caller is not the arbiter\"); _; }\r\n    modifier inState(AgreementStatus _status) { require(currentStatus == _status, \"ESCROW: Invalid agreement state\"); _; }\r\n\r\n    // --- Functions ---\r\n\r\n    constructor(\r\n        address _client,\r\n        address _freelancer,\r\n        address _arbiter,\r\n        address _tokenAddress,\r\n        uint256[] memory _payouts,\r\n        string[] memory _detailsHashes\r\n    ) {\r\n        require(_client != address(0) && _freelancer != address(0), \"ESCROW: Invalid participant address\");\r\n        require(_payouts.length == _detailsHashes.length, \"ESCROW: Input array lengths must match\");\r\n        \r\n        client = _client;\r\n        freelancer = _freelancer;\r\n        arbiter = _arbiter;\r\n        token = IERC20(_tokenAddress);\r\n        currentStatus = AgreementStatus.CREATED;\r\n\r\n        for (uint i = 0; i < _payouts.length; i++) {\r\n            require(_payouts[i] > 0, \"ESCROW: Payout must be greater than zero\");\r\n            milestones.push(Milestone({\r\n                payoutAmount: _payouts[i],\r\n                detailsHash: _detailsHashes[i],\r\n                workHash: \"\",\r\n                state: MilestoneStatus.PENDING\r\n            }));\r\n            totalAmount += _payouts[i];\r\n        }\r\n    }\r\n\r\n    function fundEscrow() external onlyClient inState(AgreementStatus.CREATED) nonReentrant {\r\n        require(token.allowance(client, address(this)) >= totalAmount, \"ESCROW: Check token approval amount\");\r\n        token.transferFrom(client, address(this), totalAmount);\r\n        currentStatus = AgreementStatus.FUNDED;\r\n        emit AgreementFunded(totalAmount);\r\n    }\r\n\r\n    function submitWork(uint256 _milestoneId, string memory _workHash) external onlyFreelancer {\r\n        require(currentStatus == AgreementStatus.FUNDED || currentStatus == AgreementStatus.IN_PROGRESS, \"ESCROW: Agreement not active\");\r\n        Milestone storage milestone = milestones[_milestoneId];\r\n        require(milestone.state == MilestoneStatus.PENDING, \"ESCROW: Work already submitted\");\r\n        milestone.state = MilestoneStatus.SUBMITTED;\r\n        milestone.workHash = _workHash;\r\n        emit WorkSubmitted(_milestoneId, _workHash);\r\n    }\r\n\r\n    function approveMilestone(uint256 _milestoneId) external onlyClient nonReentrant {\r\n        require(currentStatus == AgreementStatus.FUNDED || currentStatus == AgreementStatus.IN_PROGRESS, \"ESCROW: Agreement not active\");\r\n        Milestone storage milestone = milestones[_milestoneId];\r\n        require(milestone.state == MilestoneStatus.SUBMITTED, \"ESCROW: Work not submitted or already approved\");\r\n        milestone.state = MilestoneStatus.APPROVED;\r\n        if (currentStatus == AgreementStatus.FUNDED) {\r\n            currentStatus = AgreementStatus.IN_PROGRESS;\r\n        }\r\n        token.transfer(freelancer, milestone.payoutAmount);\r\n        emit MilestoneApproved(_milestoneId, milestone.payoutAmount);\r\n        _checkCompletion();\r\n    }\r\n    \r\n    function raiseDispute(uint256 _milestoneId) external {\r\n        require(msg.sender == client || msg.sender == freelancer, \"ESCROW: Not a party to the agreement\");\r\n        require(currentStatus != AgreementStatus.DISPUTED, \"ESCROW: Dispute already raised\");\r\n        currentStatus = AgreementStatus.DISPUTED;\r\n        emit DisputeRaised(_milestoneId, msg.sender);\r\n    }\r\n\r\n    function resolveDispute(uint256 _milestoneId, address _winner) external onlyArbiter inState(AgreementStatus.DISPUTED) nonReentrant {\r\n        require(_winner == client || _winner == freelancer, \"ESCROW: Winner must be client or freelancer\");\r\n        Milestone storage milestone = milestones[_milestoneId];\r\n        require(milestone.state != MilestoneStatus.APPROVED, \"ESCROW: Milestone already approved and paid\");\r\n        milestone.state = MilestoneStatus.APPROVED;\r\n        currentStatus = AgreementStatus.IN_PROGRESS;\r\n        token.transfer(_winner, milestone.payoutAmount);\r\n        emit DisputeResolved(_milestoneId, _winner, milestone.payoutAmount);\r\n        _checkCompletion();\r\n    }\r\n\r\n    function _checkCompletion() private {\r\n        for(uint i = 0; i < milestones.length; i++) {\r\n            if(milestones[i].state != MilestoneStatus.APPROVED) return;\r\n        }\r\n        currentStatus = AgreementStatus.COMPLETED;\r\n    }\r\n}\r\n\r\n"
      },
      "project/contracts/EscrowFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./Escrow.sol\";\r\nimport \"./ArbiterRegistry.sol\";\r\n\r\n/**\r\n * @title EscrowFactory (Simplified)\r\n * @dev A factory contract to create and track new single-arbiter Escrow agreements.\r\n */\r\ncontract EscrowFactory {\r\n    ArbiterRegistry public immutable arbiterRegistry;\r\n    address[] public escrowContracts;\r\n\r\n    event EscrowCreated(\r\n        address indexed escrowAddress,\r\n        address indexed client,\r\n        address indexed freelancer,\r\n        uint256 totalAmount\r\n    );\r\n\r\n    constructor(address _arbiterRegistryAddress) {\r\n        require(_arbiterRegistryAddress != address(0), \"FACTORY: Invalid registry address.\");\r\n        arbiterRegistry = ArbiterRegistry(_arbiterRegistryAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates and deploys a new Escrow contract. The caller of this function becomes the client.\r\n     */\r\n    function createEscrow(\r\n        address _freelancer,\r\n        address _arbiter,\r\n        address _tokenAddress,\r\n        uint256[] memory _payouts,\r\n        string[] memory _detailsHashes\r\n    ) external {\r\n        // The single most important security check: ensure the chosen arbiter is active in the registry.\r\n        require(arbiterRegistry.isArbiterActive(_arbiter), \"FACTORY: Invalid or inactive arbiter.\");\r\n        \r\n        // Deploy a new Escrow contract with the specified parameters for the single-arbiter model.\r\n        Escrow newEscrow = new Escrow(\r\n            msg.sender, // The client is the one who calls this function\r\n            _freelancer,\r\n            _arbiter,\r\n            _tokenAddress,\r\n            _payouts,\r\n            _detailsHashes\r\n        );\r\n\r\n        // Store the address of the newly created contract and announce it.\r\n        escrowContracts.push(address(newEscrow));\r\n        emit EscrowCreated(address(newEscrow), msg.sender, _freelancer, newEscrow.totalAmount());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a list of all escrow contracts created by this factory.\r\n     */\r\n    function getEscrowContracts() external view returns (address[] memory) {\r\n        return escrowContracts;\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}
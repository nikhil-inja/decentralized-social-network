{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-289f9a58dfba49ea5662fb498032c10ff2802fba",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/ArbiterRegistry.sol": "project/contracts/ArbiterRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/ArbiterRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title ArbiterRegistry\r\n * @dev Manages a list of approved arbiters for the escrow platform.\r\n * Only the platform owner can add or remove arbiters, but the list is public.\r\n */\r\ncontract ArbiterRegistry is Ownable {\r\n    struct Arbiter {\r\n        string name;\r\n        string profileHash; // IPFS hash of detailed credentials\r\n        bool isActive;\r\n    }\r\n\r\n    mapping(address => Arbiter) public arbiters;\r\n    address[] public arbiterList;\r\n\r\n    event ArbiterAdded(address indexed arbiterAddress, string name);\r\n    event ArbiterRemoved(address indexed arbiterAddress);\r\n\r\n    // The deployer of the contract is set as the owner\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    /**\r\n     * @dev Adds a new arbiter to the registry. Only callable by the platform owner.\r\n     */\r\n    function addArbiter(address _arbiterAddress, string memory _name, string memory _profileHash) external onlyOwner {\r\n        require(!arbiters[_arbiterAddress].isActive, \"Arbiter already exists.\");\r\n        \r\n        arbiters[_arbiterAddress] = Arbiter({\r\n            name: _name,\r\n            profileHash: _profileHash,\r\n            isActive: true\r\n        });\r\n        \r\n        arbiterList.push(_arbiterAddress);\r\n        emit ArbiterAdded(_arbiterAddress, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Deactivates an arbiter, preventing them from being chosen for new contracts.\r\n     */\r\n    function removeArbiter(address _arbiterAddress) external onlyOwner {\r\n        require(arbiters[_arbiterAddress].isActive, \"Arbiter does not exist or is already inactive.\");\r\n        arbiters[_arbiterAddress].isActive = false;\r\n        // Note: We don't remove from the array to preserve history. Frontend will filter.\r\n        emit ArbiterRemoved(_arbiterAddress);\r\n    }\r\n\r\n    function isArbiterActive(address _arbiterAddress) external view returns (bool) {\r\n        return arbiters[_arbiterAddress].isActive;\r\n    }\r\n\r\n    function getArbiterList() external view returns (address[] memory) {\r\n        return arbiterList;\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}